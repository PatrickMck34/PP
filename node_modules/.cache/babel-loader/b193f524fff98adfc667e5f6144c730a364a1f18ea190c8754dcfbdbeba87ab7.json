{"ast":null,"code":"import { createStore } from 'redux';\nconst READ_PROVIDERS = \"/providers\";\nconst SET_PROVIDERS = 'session/SET_PROVIDERS';\nconst SET_ALL_PROVIDERS = 'session/SET_ALL_PROVIDERS';\nexport const getProviders = results => async dispatch => {\n  const response = await fetch('/api/provider', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Results': JSON.stringify(results)\n    }\n  });\n  if (response.ok) {\n    const providers = await response.json();\n    dispatch(getProvider(providers));\n  } else {\n    // Handle error\n  }\n};\nexport const getAllProviders = () => async dispatch => {\n  const response = await fetch('/api/provider/all', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  if (response.ok) {\n    const providers = await response.json();\n    dispatch(getAllProvider(providers));\n  } else {\n    // Handle error\n  }\n};\nexport const getProvider = providers => ({\n  type: SET_PROVIDERS,\n  providers\n});\nexport const getAllProvider = providers => ({\n  type: SET_ALL_PROVIDERS,\n  providers\n});\nconst initialState = {\n  section2: {},\n  section3: {},\n  allSections: {}\n};\nexport const sectionReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_SECTION2':\n      return {\n        ...state,\n        section2: action.payload\n      };\n    case 'SET_SECTION3':\n      return {\n        ...state,\n        section3: action.payload\n      };\n    case 'SET_ZIPCODE':\n      return {\n        ...state,\n        zipCode: action.payload\n      };\n    case SET_PROVIDERS:\n      return {\n        ...state,\n        allSections: action.providers\n      };\n    default:\n      return state;\n  }\n};\nexport default sectionReducer;","map":{"version":3,"names":["createStore","READ_PROVIDERS","SET_PROVIDERS","SET_ALL_PROVIDERS","getProviders","results","dispatch","response","fetch","method","headers","JSON","stringify","ok","providers","json","getProvider","getAllProviders","getAllProvider","type","initialState","section2","section3","allSections","sectionReducer","state","action","payload","zipCode"],"sources":["/home/patrick/PP/promise/src/store/section.js"],"sourcesContent":["import { createStore } from 'redux';\nconst READ_PROVIDERS = \"/providers\"\nconst SET_PROVIDERS = 'session/SET_PROVIDERS';\nconst SET_ALL_PROVIDERS = 'session/SET_ALL_PROVIDERS';\n\nexport const getProviders = (results) => async (dispatch) => {\n  const response = await fetch('/api/provider', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Results': JSON.stringify(results),\n    },\n  });\n\n  if (response.ok) {\n    const providers = await response.json();\n    dispatch(getProvider(providers));\n  } else {\n    // Handle error\n  }\n};\nexport const getAllProviders =()=>  async (dispatch) => {\n  const response = await fetch('/api/provider/all', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      \n    },\n\n  });\n\n  if (response.ok) {\n    const providers = await response.json();\n    dispatch(getAllProvider(providers));\n  } else {\n    // Handle error\n  }\n};\nexport const getProvider = (providers) => ({\n  type: SET_PROVIDERS,\n  providers,\n});\nexport const getAllProvider = (providers) => ({\n  type: SET_ALL_PROVIDERS,\n  providers,\n  \n});\n\n\nconst initialState = {\n  section2: {},\n  section3: {},\n  allSections: {}\n};\n\nexport const sectionReducer=(state = initialState, action)=> {\n  switch (action.type) {\n    case 'SET_SECTION2':\n      return { ...state, section2: action.payload };\n    case 'SET_SECTION3':\n      return { ...state, section3: action.payload };\n      case 'SET_ZIPCODE':\n      return { ...state, zipCode: action.payload };\n      case SET_PROVIDERS:\n        return {...state, allSections: action.providers};\n    default:\n      return state;\n  }\n}\nexport default sectionReducer\n\n\n\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,MAAMC,cAAc,GAAG,YAAY;AACnC,MAAMC,aAAa,GAAG,uBAAuB;AAC7C,MAAMC,iBAAiB,GAAG,2BAA2B;AAErD,OAAO,MAAMC,YAAY,GAAIC,OAAO,IAAK,MAAOC,QAAQ,IAAK;EAC3D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,EAAE;IAC5CC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,WAAW,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;IACrC;EACF,CAAC,CAAC;EAEF,IAAIE,QAAQ,CAACM,EAAE,EAAE;IACf,MAAMC,SAAS,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IACvCT,QAAQ,CAACU,WAAW,CAACF,SAAS,CAAC,CAAC;EAClC,CAAC,MAAM;IACL;EAAA;AAEJ,CAAC;AACD,OAAO,MAAMG,eAAe,GAAEA,CAAA,KAAM,MAAOX,QAAQ,IAAK;EACtD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,EAAE;IAChDC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAElB;EAEF,CAAC,CAAC;EAEF,IAAIH,QAAQ,CAACM,EAAE,EAAE;IACf,MAAMC,SAAS,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IACvCT,QAAQ,CAACY,cAAc,CAACJ,SAAS,CAAC,CAAC;EACrC,CAAC,MAAM;IACL;EAAA;AAEJ,CAAC;AACD,OAAO,MAAME,WAAW,GAAIF,SAAS,KAAM;EACzCK,IAAI,EAAEjB,aAAa;EACnBY;AACF,CAAC,CAAC;AACF,OAAO,MAAMI,cAAc,GAAIJ,SAAS,KAAM;EAC5CK,IAAI,EAAEhB,iBAAiB;EACvBW;AAEF,CAAC,CAAC;AAGF,MAAMM,YAAY,GAAG;EACnBC,QAAQ,EAAE,CAAC,CAAC;EACZC,QAAQ,EAAE,CAAC,CAAC;EACZC,WAAW,EAAE,CAAC;AAChB,CAAC;AAED,OAAO,MAAMC,cAAc,GAACA,CAACC,KAAK,GAAGL,YAAY,EAAEM,MAAM,KAAI;EAC3D,QAAQA,MAAM,CAACP,IAAI;IACjB,KAAK,cAAc;MACjB,OAAO;QAAE,GAAGM,KAAK;QAAEJ,QAAQ,EAAEK,MAAM,CAACC;MAAQ,CAAC;IAC/C,KAAK,cAAc;MACjB,OAAO;QAAE,GAAGF,KAAK;QAAEH,QAAQ,EAAEI,MAAM,CAACC;MAAQ,CAAC;IAC7C,KAAK,aAAa;MAClB,OAAO;QAAE,GAAGF,KAAK;QAAEG,OAAO,EAAEF,MAAM,CAACC;MAAQ,CAAC;IAC5C,KAAKzB,aAAa;MAChB,OAAO;QAAC,GAAGuB,KAAK;QAAEF,WAAW,EAAEG,MAAM,CAACZ;MAAS,CAAC;IACpD;MACE,OAAOW,KAAK;EAChB;AACF,CAAC;AACD,eAAeD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}